generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String             @unique
  password         String
  isCreator        Boolean            @default(false)
  image            String?
  createdAt        DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  userService      UserService[]
  userAvailability UserAvailability[]
}

model UserAvailability {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  date     String
  reserved Boolean @default(false)
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @db.ObjectId
  hours    Hours[]
}

model Hours {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  time               Int
  isTaken            Boolean           @default(false)
  userAvailability   UserAvailability? @relation(fields: [userAvailabilityId], references: [id], onDelete: Cascade)
  userAvailabilityId String            @db.ObjectId
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  services Service[]
}

model Service {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String        @db.ObjectId
  UserService UserService[]
}

model UserService {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  serviceId String  @db.ObjectId
  minutes   Int     @default(30)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}
